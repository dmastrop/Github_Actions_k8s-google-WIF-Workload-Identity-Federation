Rename the current docker-compose file
Rename the docker-compose.yml file to docker-compose-dev.yml. 
Going forward you will need to pass a flag to specify which compose file you want to build and run from:
docker-compose -f docker-compose-dev.yml up 
docker-compose -f docker-compose-dev.yml up --build
docker-compose -f docker-compose-dev.yml down      <<<< these will now be used to bring up Section 10 development set up http://locahost:3050 the basic server setup.

Create a production only docker-compose.yml file
The production compose file will follow closely what was written in the Dockerrun.aws.json. There are two major differences:
No Container Links: In the "Forming Container Links" lecture we add the client and server services to the links array of the nginx service. Docker Compose will handle this container communication automatically for us.
Environment Variables: When using a compose file we will need to explicitly specify the environment variables each service will need access to. The value for each variable must match the corresponding variable names you have specified in the Elastic Beanstalk environment. The AWS variables are created in the "Setting Environment Variables" lecture.

Note - You must not have a Dockerrun.aws.json file in your project directory. If AWS EBS sees this file the deployment will fail. If you have previously followed this course and deployed to the old Multi-container platform you will need to delete this file before moving to the new platform!!!

This is the new docker-compose.yml file:


version: "3"
services:
  client:
    image: “dave123456789/multi-client-10-14"
    mem_limit: 128m
    hostname: client
  server:
    image: “dave123456789/multi-server-10-14"
    mem_limit: 128m
    hostname: api
    environment:
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PORT=$REDIS_PORT
      - PGUSER=$PGUSER
      - PGHOST=$PGHOST
      - PGDATABASE=$PGDATABASE
      - PGPASSWORD=$PGPASSWORD
      - PGPORT=$PGPORT
  worker:
    image: “dave123456789/multi-worker-10-14"
    mem_limit: 128m
    hostname: worker
    environment:
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PORT=$REDIS_PORT
  nginx:
    image: “dave123456789/multi-nginx-10-14"
    mem_limit: 128m
    hostname: nginx
    ports:
      - "80:80"

